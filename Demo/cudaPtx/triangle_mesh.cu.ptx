//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19805474
// Cuda compilation tools, release 7.5, V7.5.16
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_20
.address_size 64

	// .globl	_Z9intersecti
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 1 .b8 tangent_buffer[1];
.global .align 1 .b8 bigTangent_buffer[1];
.global .align 1 .b8 tri_indice[1];
.global .align 8 .b8 texcoord[8];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 8 .b8 tangent[12];
.global .align 8 .b8 bigTangent[12];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texcoordE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7tangentE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10bigTangentE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texcoordE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename7tangentE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10bigTangentE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8texcoordE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7tangentE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10bigTangentE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8texcoordE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 101, 120, 99, 111, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic7tangentE[18] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 110, 103, 101, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic10bigTangentE[21] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 98, 105, 103, 84, 97, 110, 103, 101, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8texcoordE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7tangentE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10bigTangentE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<133>;
	.reg .b32 	%r<49>;
	.reg .b64 	%rd<116>;


	ld.param.u32 	%r1, [_Z9intersecti_param_0];
	cvt.s64.s32	%rd52, %r1;
	mov.u64 	%rd62, tri_indice;
	cvta.global.u64 	%rd3, %rd62;
	mov.u32 	%r20, 1;
	mov.u32 	%r21, 12;
	mov.u64 	%rd61, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r20, %r21, %rd52, %rd61, %rd61, %rd61);
	// inline asm
	ld.s32 	%rd10, [%rd2];
	mov.u64 	%rd63, vertex_buffer;
	cvta.global.u64 	%rd9, %rd63;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r20, %r21, %rd10, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f13, [%rd8+8];
	ld.f32 	%f14, [%rd8+4];
	ld.f32 	%f15, [%rd8];
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd3, %r20, %r21, %rd52, %rd61, %rd61, %rd61);
	// inline asm
	ld.s32 	%rd22, [%rd14+4];
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd9, %r20, %r21, %rd22, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f16, [%rd20+8];
	ld.f32 	%f17, [%rd20+4];
	ld.f32 	%f18, [%rd20];
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd3, %r20, %r21, %rd52, %rd61, %rd61, %rd61);
	// inline asm
	ld.s32 	%rd34, [%rd26+8];
	// inline asm
	call (%rd32), _rt_buffer_get_64, (%rd9, %r20, %r21, %rd34, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f19, [%rd32+8];
	ld.f32 	%f20, [%rd32+4];
	ld.f32 	%f21, [%rd32];
	// inline asm
	call (%rd38), _rt_buffer_get_64, (%rd3, %r20, %r21, %rd52, %rd61, %rd61, %rd61);
	// inline asm
	ld.s32 	%rd46, [%rd38];
	mov.u64 	%rd64, tangent_buffer;
	cvta.global.u64 	%rd45, %rd64;
	// inline asm
	call (%rd44), _rt_buffer_get_64, (%rd45, %r20, %r21, %rd46, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f3, [%rd44+8];
	ld.f32 	%f2, [%rd44+4];
	ld.f32 	%f1, [%rd44];
	// inline asm
	call (%rd50), _rt_buffer_get_64, (%rd3, %r20, %r21, %rd52, %rd61, %rd61, %rd61);
	// inline asm
	ld.s32 	%rd58, [%rd50];
	mov.u64 	%rd65, bigTangent_buffer;
	cvta.global.u64 	%rd57, %rd65;
	// inline asm
	call (%rd56), _rt_buffer_get_64, (%rd57, %r20, %r21, %rd58, %rd61, %rd61, %rd61);
	// inline asm
	sub.f32 	%f22, %f18, %f15;
	sub.f32 	%f23, %f17, %f14;
	sub.f32 	%f24, %f16, %f13;
	sub.f32 	%f25, %f15, %f21;
	sub.f32 	%f26, %f14, %f20;
	sub.f32 	%f27, %f13, %f19;
	mul.f32 	%f28, %f24, %f26;
	mul.f32 	%f29, %f23, %f27;
	sub.f32 	%f4, %f28, %f29;
	mul.f32 	%f30, %f22, %f27;
	mul.f32 	%f31, %f24, %f25;
	sub.f32 	%f5, %f30, %f31;
	mul.f32 	%f32, %f23, %f25;
	mul.f32 	%f33, %f22, %f26;
	sub.f32 	%f6, %f32, %f33;
	ld.global.f32 	%f34, [ray+12];
	ld.global.f32 	%f35, [ray+16];
	mul.f32 	%f36, %f5, %f35;
	fma.rn.f32 	%f37, %f4, %f34, %f36;
	ld.global.f32 	%f38, [ray+20];
	fma.rn.f32 	%f39, %f6, %f38, %f37;
	rcp.rn.f32 	%f40, %f39;
	ld.global.f32 	%f41, [ray];
	sub.f32 	%f42, %f15, %f41;
	ld.global.f32 	%f43, [ray+4];
	sub.f32 	%f44, %f14, %f43;
	ld.global.f32 	%f45, [ray+8];
	sub.f32 	%f46, %f13, %f45;
	mul.f32 	%f47, %f40, %f42;
	mul.f32 	%f48, %f40, %f44;
	mul.f32 	%f49, %f40, %f46;
	mul.f32 	%f50, %f35, %f49;
	mul.f32 	%f51, %f48, %f38;
	sub.f32 	%f52, %f50, %f51;
	mul.f32 	%f53, %f47, %f38;
	mul.f32 	%f54, %f49, %f34;
	sub.f32 	%f55, %f53, %f54;
	mul.f32 	%f56, %f48, %f34;
	mul.f32 	%f57, %f47, %f35;
	sub.f32 	%f58, %f56, %f57;
	mul.f32 	%f59, %f26, %f55;
	fma.rn.f32 	%f60, %f25, %f52, %f59;
	fma.rn.f32 	%f7, %f27, %f58, %f60;
	mul.f32 	%f61, %f23, %f55;
	fma.rn.f32 	%f62, %f22, %f52, %f61;
	fma.rn.f32 	%f8, %f24, %f58, %f62;
	mul.f32 	%f63, %f5, %f48;
	fma.rn.f32 	%f64, %f4, %f47, %f63;
	fma.rn.f32 	%f9, %f6, %f49, %f64;
	ld.global.f32 	%f65, [ray+32];
	setp.lt.f32	%p1, %f9, %f65;
	ld.global.f32 	%f66, [ray+28];
	setp.gt.f32	%p2, %f9, %f66;
	and.pred  	%p3, %p1, %p2;
	setp.ge.f32	%p4, %f7, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.f32	%p6, %f8, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.f32 	%f67, %f7, %f8;
	setp.le.f32	%p8, %f67, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_9;
	bra.uni 	BB0_1;

BB0_1:
	ld.f32 	%f12, [%rd56+8];
	ld.f32 	%f11, [%rd56+4];
	ld.f32 	%f10, [%rd56];
	// inline asm
	call (%r22), _rt_potential_intersection, (%f9);
	// inline asm
	setp.eq.s32	%p10, %r22, 0;
	@%p10 bra 	BB0_9;

	mul.f32 	%f69, %f5, %f5;
	fma.rn.f32 	%f70, %f4, %f4, %f69;
	fma.rn.f32 	%f71, %f6, %f6, %f70;
	sqrt.rn.f32 	%f72, %f71;
	rcp.rn.f32 	%f73, %f72;
	mul.f32 	%f74, %f6, %f73;
	mul.f32 	%f75, %f5, %f73;
	mul.f32 	%f76, %f4, %f73;
	st.global.v2.f32 	[geometric_normal], {%f76, %f75};
	st.global.f32 	[geometric_normal+8], %f74;
	st.global.v2.f32 	[tangent], {%f1, %f2};
	st.global.f32 	[tangent+8], %f3;
	st.global.v2.f32 	[bigTangent], {%f10, %f11};
	st.global.f32 	[bigTangent+8], %f12;
	mov.u64 	%rd71, normal_buffer;
	cvta.global.u64 	%rd70, %rd71;
	// inline asm
	call (%rd66, %rd67, %rd68, %rd69), _rt_buffer_get_size_64, (%rd70, %r20, %r21);
	// inline asm
	cvt.u32.u64	%r25, %rd66;
	setp.eq.s32	%p11, %r25, 0;
	@%p11 bra 	BB0_4;

	mul.lo.s32 	%r32, %r1, 3;
	cvt.s64.s32	%rd74, %r32;
	// inline asm
	call (%rd72), _rt_buffer_get_64, (%rd70, %r20, %r21, %rd74, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f77, [%rd72+8];
	ld.f32 	%f78, [%rd72+4];
	ld.f32 	%f79, [%rd72];
	add.s32 	%r33, %r32, 1;
	cvt.s64.s32	%rd80, %r33;
	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd70, %r20, %r21, %rd80, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f80, [%rd78+8];
	ld.f32 	%f81, [%rd78+4];
	ld.f32 	%f82, [%rd78];
	add.s32 	%r34, %r32, 2;
	cvt.s64.s32	%rd86, %r34;
	// inline asm
	call (%rd84), _rt_buffer_get_64, (%rd70, %r20, %r21, %rd86, %rd61, %rd61, %rd61);
	// inline asm
	ld.f32 	%f83, [%rd84+8];
	ld.f32 	%f84, [%rd84+4];
	ld.f32 	%f85, [%rd84];
	mul.f32 	%f86, %f8, %f85;
	mul.f32 	%f87, %f8, %f84;
	mul.f32 	%f88, %f8, %f83;
	fma.rn.f32 	%f89, %f7, %f82, %f86;
	fma.rn.f32 	%f90, %f7, %f81, %f87;
	fma.rn.f32 	%f91, %f7, %f80, %f88;
	mov.f32 	%f92, 0f3F800000;
	sub.f32 	%f93, %f92, %f7;
	sub.f32 	%f94, %f93, %f8;
	fma.rn.f32 	%f95, %f94, %f79, %f89;
	fma.rn.f32 	%f96, %f94, %f78, %f90;
	fma.rn.f32 	%f97, %f94, %f77, %f91;
	mul.f32 	%f98, %f96, %f96;
	fma.rn.f32 	%f99, %f95, %f95, %f98;
	fma.rn.f32 	%f100, %f97, %f97, %f99;
	sqrt.rn.f32 	%f101, %f100;
	rcp.rn.f32 	%f102, %f101;
	mul.f32 	%f103, %f102, %f97;
	mul.f32 	%f104, %f102, %f96;
	mul.f32 	%f105, %f102, %f95;
	st.global.v2.f32 	[shading_normal], {%f105, %f104};
	st.global.f32 	[shading_normal+8], %f103;
	bra.uni 	BB0_5;

BB0_4:
	ld.global.f32 	%f106, [geometric_normal+8];
	ld.global.v2.f32 	{%f107, %f108}, [geometric_normal];
	st.global.v2.f32 	[shading_normal], {%f107, %f108};
	st.global.f32 	[shading_normal+8], %f106;

BB0_5:
	mov.u64 	%rd96, texcoord_buffer;
	cvta.global.u64 	%rd95, %rd96;
	mov.u32 	%r36, 8;
	// inline asm
	call (%rd91, %rd92, %rd93, %rd94), _rt_buffer_get_size_64, (%rd95, %r20, %r36);
	// inline asm
	cvt.u32.u64	%r37, %rd91;
	setp.eq.s32	%p12, %r37, 0;
	@%p12 bra 	BB0_7;

	mul.lo.s32 	%r44, %r1, 3;
	cvt.s64.s32	%rd99, %r44;
	// inline asm
	call (%rd97), _rt_buffer_get_64, (%rd95, %r20, %r36, %rd99, %rd61, %rd61, %rd61);
	// inline asm
	ld.v2.f32 	{%f111, %f112}, [%rd97];
	add.s32 	%r45, %r44, 1;
	cvt.s64.s32	%rd105, %r45;
	// inline asm
	call (%rd103), _rt_buffer_get_64, (%rd95, %r20, %r36, %rd105, %rd61, %rd61, %rd61);
	// inline asm
	ld.v2.f32 	{%f115, %f116}, [%rd103];
	add.s32 	%r46, %r44, 2;
	cvt.s64.s32	%rd111, %r46;
	// inline asm
	call (%rd109), _rt_buffer_get_64, (%rd95, %r20, %r36, %rd111, %rd61, %rd61, %rd61);
	// inline asm
	ld.v2.f32 	{%f119, %f120}, [%rd109];
	mul.f32 	%f123, %f8, %f119;
	mul.f32 	%f124, %f8, %f120;
	fma.rn.f32 	%f125, %f7, %f115, %f123;
	fma.rn.f32 	%f126, %f7, %f116, %f124;
	mov.f32 	%f127, 0f3F800000;
	sub.f32 	%f128, %f127, %f7;
	sub.f32 	%f129, %f128, %f8;
	fma.rn.f32 	%f130, %f129, %f112, %f126;
	fma.rn.f32 	%f131, %f129, %f111, %f125;
	st.global.v2.f32 	[texcoord], {%f131, %f130};
	bra.uni 	BB0_8;

BB0_7:
	mov.f32 	%f132, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f132, %f132};

BB0_8:
	mov.u32 	%r48, 0;
	// inline asm
	call (%r47), _rt_report_intersection, (%r48);
	// inline asm

BB0_9:
	ret;
}

	// .globl	_Z11mesh_boundsiPf
.visible .entry _Z11mesh_boundsiPf(
	.param .u32 _Z11mesh_boundsiPf_param_0,
	.param .u64 _Z11mesh_boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<43>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<42>;


	ld.param.u64 	%rd3, [_Z11mesh_boundsiPf_param_1];
	ld.param.s32 	%rd30, [_Z11mesh_boundsiPf_param_0];
	mov.u64 	%rd40, tri_indice;
	cvta.global.u64 	%rd5, %rd40;
	mov.u32 	%r11, 1;
	mov.u32 	%r12, 12;
	mov.u64 	%rd39, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r11, %r12, %rd30, %rd39, %rd39, %rd39);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd41, vertex_buffer;
	cvta.global.u64 	%rd11, %rd41;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd12, %rd39, %rd39, %rd39);
	// inline asm
	ld.f32 	%f4, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd5, %r11, %r12, %rd30, %rd39, %rd39, %rd39);
	// inline asm
	ld.s32 	%rd24, [%rd16+4];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd24, %rd39, %rd39, %rd39);
	// inline asm
	ld.f32 	%f7, [%rd22+8];
	ld.f32 	%f6, [%rd22+4];
	ld.f32 	%f5, [%rd22];
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd5, %r11, %r12, %rd30, %rd39, %rd39, %rd39);
	// inline asm
	ld.s32 	%rd36, [%rd28+8];
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd36, %rd39, %rd39, %rd39);
	// inline asm
	sub.f32 	%f12, %f5, %f1;
	sub.f32 	%f13, %f6, %f2;
	sub.f32 	%f14, %f7, %f4;
	ld.f32 	%f10, [%rd34+8];
	ld.f32 	%f9, [%rd34+4];
	ld.f32 	%f8, [%rd34];
	sub.f32 	%f15, %f8, %f1;
	sub.f32 	%f16, %f9, %f2;
	sub.f32 	%f17, %f10, %f4;
	mul.f32 	%f18, %f13, %f17;
	mul.f32 	%f19, %f14, %f16;
	sub.f32 	%f20, %f18, %f19;
	mul.f32 	%f21, %f14, %f15;
	mul.f32 	%f22, %f12, %f17;
	sub.f32 	%f23, %f21, %f22;
	mul.f32 	%f24, %f12, %f16;
	mul.f32 	%f25, %f13, %f15;
	sub.f32 	%f26, %f24, %f25;
	mul.f32 	%f27, %f23, %f23;
	fma.rn.f32 	%f28, %f20, %f20, %f27;
	fma.rn.f32 	%f29, %f26, %f26, %f28;
	sqrt.rn.f32 	%f11, %f29;
	mov.pred 	%p5, 0;
	setp.leu.f32	%p4, %f11, 0f00000000;
	@%p4 bra 	BB1_2;

	abs.f32 	%f30, %f11;
	setp.neu.f32	%p5, %f30, 0f7F800000;

BB1_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_4:
	min.f32 	%f31, %f1, %f5;
	min.f32 	%f32, %f2, %f6;
	min.f32 	%f33, %f31, %f8;
	min.f32 	%f34, %f32, %f9;
	min.f32 	%f35, %f4, %f7;
	min.f32 	%f36, %f35, %f10;
	st.global.f32 	[%rd2], %f33;
	st.global.f32 	[%rd2+4], %f34;
	st.global.f32 	[%rd2+8], %f36;
	max.f32 	%f37, %f1, %f5;
	max.f32 	%f38, %f2, %f6;
	max.f32 	%f39, %f37, %f8;
	max.f32 	%f40, %f38, %f9;
	max.f32 	%f41, %f4, %f7;
	max.f32 	%f42, %f41, %f10;
	st.global.f32 	[%rd2+12], %f39;
	st.global.f32 	[%rd2+16], %f40;
	st.global.f32 	[%rd2+20], %f42;
	bra.uni 	BB1_5;

BB1_3:
	mov.u32 	%r13, 2096152002;
	st.global.u32 	[%rd2+8], %r13;
	st.global.u32 	[%rd2+4], %r13;
	st.global.u32 	[%rd2], %r13;
	mov.u32 	%r14, -51331646;
	st.global.u32 	[%rd2+20], %r14;
	st.global.u32 	[%rd2+16], %r14;
	st.global.u32 	[%rd2+12], %r14;

BB1_5:
	ret;
}


